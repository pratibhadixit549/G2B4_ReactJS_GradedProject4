{"ast":null,"code":"var _jsxFileName = \"E:\\\\Full-Stack-Project\\\\project-movie-app\\\\client\\\\src\\\\component\\\\moviesList\\\\MoviesList.tsx\";\nimport { Component } from \"react\";\nimport { Alert, Col, Row } from \"react-bootstrap\";\nimport { getMovies } from \"../../services/movies\";\nimport LoadingIndicator from \"../common/LoadingIndicator\";\nimport NoDataMatched from \"../global/NoDataMatched\";\nimport MovieListItem from \"./MovieListItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass MoviesList extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      status: \"LOADING\",\n      searchString: \"\"\n    };\n\n    this.updateValue = event => {\n      const {\n        value\n      } = event.target;\n      this.setState(() => {\n        return {\n          searchString: value\n        };\n      }, () => {\n        this.searchMovie(this.state.searchString);\n      });\n    };\n\n    this.removeMovieFromFavourite = title => {\n      var _this$state$moviesToS;\n\n      this.setState({\n        status: \"LOADING\"\n      });\n      const moviesToShow = (_this$state$moviesToS = this.state.moviesToShow) === null || _this$state$moviesToS === void 0 ? void 0 : _this$state$moviesToS.filter(movie => movie.title !== title);\n      this.setState({\n        status: \"LOADED\",\n        moviesToShow\n      });\n    };\n\n    this.reloadMovieList = async () => {\n      this.setState({\n        status: \"LOADING\"\n      });\n\n      try {\n        const movies = await getMovies(this.props.match.params.moviesCategory);\n        const moviesToShow = movies;\n        this.setState({\n          status: \"LOADED\",\n          movies,\n          moviesToShow\n        });\n      } catch (error) {\n        this.setState({\n          status: \"LOADING_ERROR\",\n          error: error\n        });\n      }\n    };\n  }\n\n  searchMovie(searchString) {\n    var _this$state$movies;\n\n    this.setState({\n      status: \"LOADING\"\n    });\n    const moviesToShow = (_this$state$movies = this.state.movies) === null || _this$state$movies === void 0 ? void 0 : _this$state$movies.filter(x => {\n      return x.title.toLowerCase().includes(searchString.toLowerCase());\n    });\n    this.setState({\n      status: \"LOADED\",\n      moviesToShow\n    });\n  }\n\n  render() {\n    var _error$message;\n\n    const {\n      status,\n      moviesToShow,\n      error,\n      searchString\n    } = this.state;\n    let el;\n\n    switch (status) {\n      case \"LOADING\":\n        el = /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n          size: \"large\",\n          message: \"We are Fetching the List of Movies. Please wait....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this);\n        break;\n\n      case \"LOADING_ERROR\":\n        let msg = (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : \"\";\n\n        if ((msg === null || msg === void 0 ? void 0 : msg.indexOf(\"404\")) > -1) {\n          el = /*#__PURE__*/_jsxDEV(NoDataMatched, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 16\n          }, this);\n        } else {\n          el = /*#__PURE__*/_jsxDEV(Alert, {\n            variant: \"danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 16\n          }, this);\n        }\n\n        break;\n\n      case \"LOADED\":\n        el = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              border: '1px solid red',\n              margin\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"search\",\n              placeholder: \"Search movie...\",\n              id: \"search\",\n              pattern: \".*\\\\S.*\",\n              className: \"ms-2 my-2 me-2\",\n              value: searchString,\n              onChange: this.updateValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"caret\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            xs: 2,\n            md: 3,\n            lg: 5,\n            children: moviesToShow === null || moviesToShow === void 0 ? void 0 : moviesToShow.map((movies, idx) => /*#__PURE__*/_jsxDEV(Col, {\n              className: \"d-flex align-items-stretch my-3\",\n              children: /*#__PURE__*/_jsxDEV(MovieListItem, {\n                movies: movies,\n                path: this.props.match.params.moviesCategory,\n                onRemove: this.removeMovieFromFavourite\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n        break;\n\n      default:\n        break;\n    }\n\n    return el;\n  }\n\n  async componentDidMount() {\n    await this.reloadMovieList();\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props.match.params.moviesCategory !== prevProps.match.params.moviesCategory) {\n      await this.reloadMovieList();\n    }\n  }\n\n}\n\nexport default MoviesList;","map":{"version":3,"sources":["E:/Full-Stack-Project/project-movie-app/client/src/component/moviesList/MoviesList.tsx"],"names":["Component","Alert","Col","Row","getMovies","LoadingIndicator","NoDataMatched","MovieListItem","MoviesList","state","status","searchString","updateValue","event","value","target","setState","searchMovie","removeMovieFromFavourite","title","moviesToShow","filter","movie","reloadMovieList","movies","props","match","params","moviesCategory","error","x","toLowerCase","includes","render","el","msg","message","indexOf","border","margin","map","idx","componentDidMount","componentDidUpdate","prevProps"],"mappings":"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","sourcesContent":["import { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Component } from \"react\";\r\nimport { Alert, Col, Row } from \"react-bootstrap\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport IMovies from \"../../model/IMovies\";\r\nimport { getMovies } from \"../../services/movies\";\r\nimport { LoadingStatus } from \"../../services/types\";\r\nimport LoadingIndicator from \"../common/LoadingIndicator\";\r\nimport NoDataMatched from \"../global/NoDataMatched\";\r\nimport MovieListItem from \"./MovieListItem\";\r\n\r\ntype State = {\r\n  status: LoadingStatus;\r\n  movies?: IMovies[];\r\n  moviesToShow?: IMovies[];\r\n  error?: Error;\r\n  searchString: string;\r\n};\r\n\r\ntype Props = {\r\n  moviesCategory: string;\r\n};\r\n\r\nclass MoviesList extends Component<RouteComponentProps<Props>, State> {\r\n  state: State = {\r\n    status: \"LOADING\",\r\n    searchString: \"\",\r\n  };\r\n\r\n  updateValue = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { value } = event.target;\r\n\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          searchString: value,\r\n        };\r\n      },\r\n      () => {\r\n        this.searchMovie(this.state.searchString);\r\n      }\r\n    );\r\n  };\r\n\r\n  searchMovie(searchString: string) {\r\n    this.setState({\r\n      status: \"LOADING\",\r\n    });\r\n\r\n    const moviesToShow = this.state.movies?.filter((x) => {\r\n      return x.title.toLowerCase().includes(searchString.toLowerCase());\r\n    });\r\n    this.setState({\r\n      status: \"LOADED\",\r\n      moviesToShow,\r\n    });\r\n  }\r\n\r\n  removeMovieFromFavourite = (title: string) => {\r\n    this.setState({\r\n      status: \"LOADING\",\r\n    });\r\n\r\n    const moviesToShow = this.state.moviesToShow?.filter(\r\n      (movie) => movie.title !== title\r\n    );\r\n\r\n    this.setState({\r\n      status: \"LOADED\",\r\n      moviesToShow,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { status, moviesToShow, error, searchString } = this.state;\r\n\r\n    let el;\r\n\r\n    switch (status) {\r\n      case \"LOADING\":\r\n        el = (\r\n          <LoadingIndicator\r\n            size=\"large\"\r\n            message=\"We are Fetching the List of Movies. Please wait....\"\r\n          />\r\n        );\r\n        break;\r\n      case \"LOADING_ERROR\":\r\n        let msg = error?.message ?? \"\";\r\n\r\n        if (msg?.indexOf(\"404\") > -1) {\r\n          el = <NoDataMatched />;\r\n        } else {\r\n          el = <Alert variant=\"danger\">{error?.message}</Alert>;\r\n        }\r\n        break;\r\n      case \"LOADED\":\r\n        el = (\r\n          <>\r\n            <div style={{border: '1px solid red', margin}}> \r\n              <input\r\n                type=\"search\"\r\n                placeholder=\"Search movie...\"\r\n                id=\"search\"\r\n                pattern=\".*\\S.*\"\r\n                className=\"ms-2 my-2 me-2\"\r\n                value={searchString}\r\n                onChange={this.updateValue}\r\n                \r\n              />\r\n              <span className=\"caret\"></span>\r\n            </div>\r\n            <Row xs={2} md={3} lg={5}>\r\n              {moviesToShow?.map((movies, idx) => (\r\n                <Col key={idx} className=\"d-flex align-items-stretch my-3\">\r\n                  <MovieListItem\r\n                    movies={movies}\r\n                    path={this.props.match.params.moviesCategory}\r\n                    onRemove={this.removeMovieFromFavourite}\r\n                  />\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n          </>\r\n        );\r\n\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return el;\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.reloadMovieList();\r\n  }\r\n\r\n  async componentDidUpdate(prevProps: RouteComponentProps<Props>) {\r\n    if (\r\n      this.props.match.params.moviesCategory !==\r\n      prevProps.match.params.moviesCategory\r\n    ) {\r\n      await this.reloadMovieList();\r\n    }\r\n  }\r\n\r\n  reloadMovieList = async () => {\r\n    this.setState({\r\n      status: \"LOADING\",\r\n    });\r\n\r\n    try {\r\n      const movies = await getMovies(this.props.match.params.moviesCategory);\r\n      const moviesToShow = movies;\r\n      this.setState({\r\n        status: \"LOADED\",\r\n        movies,\r\n        moviesToShow,\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        status: \"LOADING_ERROR\",\r\n        error: error as Error,\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport default MoviesList;\r\n"]},"metadata":{},"sourceType":"module"}