{"ast":null,"code":"import axios from \"axios\";\nconst basePath = process.env.REACT_APP_API_BASE_URL;\n\nconst getMovies = async moviesCategory => {\n  const response = await axios.get(`${basePath}/${moviesCategory}`);\n  return response.data;\n};\n\nconst getMovieByTitle = async (moviesCategory, title) => {\n  const response = await axios.get(`${basePath}/${moviesCategory}/?title=${title}`);\n\n  if (response.data === null || response.data.length === 0) {\n    return null;\n    git;\n  }\n\n  return response.data[0];\n};\n\nconst addMovie = async (moviesCategory, movie) => {\n  return axios.post(`${basePath}/${moviesCategory}`, movie, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => response.data);\n};\n\nconst removeMovieById = async (moviesCategory, id) => {\n  const response = await axios.delete(`${basePath}/${moviesCategory}/${id}`);\n  return response.data;\n};\n\nconst getHigestMovieId = async moviesCategory => {\n  var _response$data$0$id;\n\n  const response = await axios.get(`${basePath}/${moviesCategory}?_sort=id&_order=desc`);\n\n  if (response.data === null || response.data.length === 0) {\n    return 0;\n  }\n\n  return (_response$data$0$id = response.data[0].id) !== null && _response$data$0$id !== void 0 ? _response$data$0$id : 0;\n};\n\nexport { getMovies, getMovieByTitle, addMovie, removeMovieById, getHigestMovieId };","map":{"version":3,"sources":["E:/Full-Stack-Project/project-movie-app/client/src/services/movies.ts"],"names":["axios","basePath","process","env","REACT_APP_API_BASE_URL","getMovies","moviesCategory","response","get","data","getMovieByTitle","title","length","git","addMovie","movie","post","headers","then","removeMovieById","id","delete","getHigestMovieId"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAA7B;;AAEA,MAAMC,SAAS,GAAG,MAAOC,cAAP,IAAkC;AAClD,QAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAsB,GAAEP,QAAS,IAAGK,cAAe,EAAnD,CAAvB;AACA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAHD;;AAKA,MAAMC,eAAe,GAAG,OAAOJ,cAAP,EAA+BK,KAA/B,KAAiD;AACvE,QAAMJ,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CACpB,GAAEP,QAAS,IAAGK,cAAe,WAAUK,KAAM,EADzB,CAAvB;;AAGA,MAAIJ,QAAQ,CAACE,IAAT,KAAkB,IAAlB,IAA0BF,QAAQ,CAACE,IAAT,CAAcG,MAAd,KAAyB,CAAvD,EAA0D;AACxD,WAAO,IAAP;AAAYC,IAAAA,GAAG;AAChB;;AACD,SAAON,QAAQ,CAACE,IAAT,CAAc,CAAd,CAAP;AACD,CARD;;AAUA,MAAMK,QAAQ,GAAG,OAAOR,cAAP,EAA+BS,KAA/B,KAAkD;AACjE,SAAOf,KAAK,CACTgB,IADI,CACa,GAAEf,QAAS,IAAGK,cAAe,EAD1C,EAC6CS,KAD7C,EACoD;AACvDE,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAD8C,GADpD,EAMJC,IANI,CAMEX,QAAD,IAAcA,QAAQ,CAACE,IANxB,CAAP;AAOD,CARD;;AAUA,MAAMU,eAAe,GAAG,OAAOb,cAAP,EAA+Bc,EAA/B,KAAuD;AAC7E,QAAMb,QAAQ,GAAG,MAAMP,KAAK,CAACqB,MAAN,CACpB,GAAEpB,QAAS,IAAGK,cAAe,IAAGc,EAAG,EADf,CAAvB;AAGA,SAAOb,QAAQ,CAACE,IAAhB;AACD,CALD;;AAOA,MAAMa,gBAAgB,GAAG,MAAOhB,cAAP,IAAkC;AAAA;;AACzD,QAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CACpB,GAAEP,QAAS,IAAGK,cAAe,uBADT,CAAvB;;AAIA,MAAIC,QAAQ,CAACE,IAAT,KAAkB,IAAlB,IAA0BF,QAAQ,CAACE,IAAT,CAAcG,MAAd,KAAyB,CAAvD,EAA0D;AACxD,WAAO,CAAP;AACD;;AACD,gCAAOL,QAAQ,CAACE,IAAT,CAAc,CAAd,EAAiBW,EAAxB,qEAA8B,CAA9B;AACD,CATD;;AAWA,SACEf,SADF,EAEEK,eAFF,EAGEI,QAHF,EAIEK,eAJF,EAKEG,gBALF","sourcesContent":["import axios from \"axios\";\r\nimport IMovies from \"../model/IMovies\";\r\n\r\nconst basePath = process.env.REACT_APP_API_BASE_URL;\r\n\r\nconst getMovies = async (moviesCategory: string) => {\r\n  const response = await axios.get<IMovies[]>(`${basePath}/${moviesCategory}`);\r\n  return response.data;\r\n};\r\n\r\nconst getMovieByTitle = async (moviesCategory: string, title: string) => {\r\n  const response = await axios.get<IMovies[]>(\r\n    `${basePath}/${moviesCategory}/?title=${title}`\r\n  );\r\n  if (response.data === null || response.data.length === 0) {\r\n    return null;git \r\n  }\r\n  return response.data[0];\r\n};\r\n\r\nconst addMovie = async (moviesCategory: string, movie: IMovies) => {\r\n  return axios\r\n    .post<IMovies[]>(`${basePath}/${moviesCategory}`, movie, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n    .then((response) => response.data);\r\n};\r\n\r\nconst removeMovieById = async (moviesCategory: string, id: string | number) => {\r\n  const response = await axios.delete<IMovies>(\r\n    `${basePath}/${moviesCategory}/${id}`\r\n  );\r\n  return response.data;\r\n};\r\n\r\nconst getHigestMovieId = async (moviesCategory: string) => {\r\n  const response = await axios.get<IMovies[]>(\r\n    `${basePath}/${moviesCategory}?_sort=id&_order=desc`\r\n  );\r\n\r\n  if (response.data === null || response.data.length === 0) {\r\n    return 0;\r\n  }\r\n  return response.data[0].id ?? 0;\r\n};\r\n\r\nexport {\r\n  getMovies,\r\n  getMovieByTitle,\r\n  addMovie,\r\n  removeMovieById,\r\n  getHigestMovieId,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}