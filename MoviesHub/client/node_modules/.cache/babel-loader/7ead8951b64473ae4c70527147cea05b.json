{"ast":null,"code":"import axios from \"axios\";\nconst basePath = process.env.REACT_APP_API_BASE_URL;\n\nconst getMovies = async moviesCategory => {\n  const response = await axios.get(`${basePath}/${moviesCategory}`);\n  return response.data;\n};\n\nconst getMovieByTitle = async (moviesCategory, title) => {\n  const response = await axios.get(`${basePath}/${moviesCategory}/?title=${title}`);\n\n  if (response.data === null || response.data.length === 0) {\n    return null;\n  }\n\n  return response.data[0];\n};\n\nconst addMovie = async (moviesCategory, movie) => {\n  return axios.post(`${basePath}/${moviesCategory}`, movie, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => response.data);\n};\n\nconst removeMovieById = async (moviesCategory, id) => {\n  const response = await axios.delete(`${basePath}/${moviesCategory}/${id}`);\n  return response.data;\n};\n\nconst getHigestMovieId = async moviesCategory => {\n  var _response$data$0$id;\n\n  const response = await axios.get(`${basePath}/${moviesCategory}?_sort=id&_order=desc`);\n\n  if (response.data === null || response.data.length === 0) {\n    return 0;\n  }\n\n  return (_response$data$0$id = response.data[0].id) !== null && _response$data$0$id !== void 0 ? _response$data$0$id : 0;\n};\n\nexport { getMovies, getMovieByTitle, addMovie, removeMovieById, getHigestMovieId };","map":{"version":3,"sources":["E:/VSCode Files/Making-React-App/IndustrialProject/ShrishtiSaxena/G2B7_ReactJS_GradedProject4-main/client/src/services/movies.ts"],"names":["axios","basePath","process","env","REACT_APP_API_BASE_URL","getMovies","moviesCategory","response","get","data","getMovieByTitle","title","length","addMovie","movie","post","headers","then","removeMovieById","id","delete","getHigestMovieId"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAA7B;;AAEA,MAAMC,SAAS,GAAG,MAAOC,cAAP,IAAkC;AAClD,QAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAsB,GAAEP,QAAS,IAAGK,cAAe,EAAnD,CAAvB;AACA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAHD;;AAKA,MAAMC,eAAe,GAAG,OAAOJ,cAAP,EAA+BK,KAA/B,KAAiD;AACvE,QAAMJ,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CACpB,GAAEP,QAAS,IAAGK,cAAe,WAAUK,KAAM,EADzB,CAAvB;;AAGA,MAAIJ,QAAQ,CAACE,IAAT,KAAkB,IAAlB,IAA0BF,QAAQ,CAACE,IAAT,CAAcG,MAAd,KAAyB,CAAvD,EAA0D;AACxD,WAAO,IAAP;AACD;;AACD,SAAOL,QAAQ,CAACE,IAAT,CAAc,CAAd,CAAP;AACD,CARD;;AAUA,MAAMI,QAAQ,GAAG,OAAOP,cAAP,EAA+BQ,KAA/B,KAAkD;AACjE,SAAOd,KAAK,CACTe,IADI,CACa,GAAEd,QAAS,IAAGK,cAAe,EAD1C,EAC6CQ,KAD7C,EACoD;AACvDE,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAD8C,GADpD,EAMJC,IANI,CAMEV,QAAD,IAAcA,QAAQ,CAACE,IANxB,CAAP;AAOD,CARD;;AAUA,MAAMS,eAAe,GAAG,OAAOZ,cAAP,EAA+Ba,EAA/B,KAAuD;AAC7E,QAAMZ,QAAQ,GAAG,MAAMP,KAAK,CAACoB,MAAN,CACpB,GAAEnB,QAAS,IAAGK,cAAe,IAAGa,EAAG,EADf,CAAvB;AAGA,SAAOZ,QAAQ,CAACE,IAAhB;AACD,CALD;;AAOA,MAAMY,gBAAgB,GAAG,MAAOf,cAAP,IAAkC;AAAA;;AACzD,QAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CACpB,GAAEP,QAAS,IAAGK,cAAe,uBADT,CAAvB;;AAIA,MAAIC,QAAQ,CAACE,IAAT,KAAkB,IAAlB,IAA0BF,QAAQ,CAACE,IAAT,CAAcG,MAAd,KAAyB,CAAvD,EAA0D;AACxD,WAAO,CAAP;AACD;;AACD,gCAAOL,QAAQ,CAACE,IAAT,CAAc,CAAd,EAAiBU,EAAxB,qEAA8B,CAA9B;AACD,CATD;;AAWA,SACEd,SADF,EAEEK,eAFF,EAGEG,QAHF,EAIEK,eAJF,EAKEG,gBALF","sourcesContent":["import axios from \"axios\";\nimport IMovies from \"../model/IMovies\";\n\nconst basePath = process.env.REACT_APP_API_BASE_URL;\n\nconst getMovies = async (moviesCategory: string) => {\n  const response = await axios.get<IMovies[]>(`${basePath}/${moviesCategory}`);\n  return response.data;\n};\n\nconst getMovieByTitle = async (moviesCategory: string, title: string) => {\n  const response = await axios.get<IMovies[]>(\n    `${basePath}/${moviesCategory}/?title=${title}`\n  );\n  if (response.data === null || response.data.length === 0) {\n    return null;\n  }\n  return response.data[0];\n};\n\nconst addMovie = async (moviesCategory: string, movie: IMovies) => {\n  return axios\n    .post<IMovies[]>(`${basePath}/${moviesCategory}`, movie, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n    .then((response) => response.data);\n};\n\nconst removeMovieById = async (moviesCategory: string, id: string | number) => {\n  const response = await axios.delete<IMovies>(\n    `${basePath}/${moviesCategory}/${id}`\n  );\n  return response.data;\n};\n\nconst getHigestMovieId = async (moviesCategory: string) => {\n  const response = await axios.get<IMovies[]>(\n    `${basePath}/${moviesCategory}?_sort=id&_order=desc`\n  );\n\n  if (response.data === null || response.data.length === 0) {\n    return 0;\n  }\n  return response.data[0].id ?? 0;\n};\n\nexport {\n  getMovies,\n  getMovieByTitle,\n  addMovie,\n  removeMovieById,\n  getHigestMovieId,\n};\n"]},"metadata":{},"sourceType":"module"}