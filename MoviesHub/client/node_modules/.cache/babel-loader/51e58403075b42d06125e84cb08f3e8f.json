{"ast":null,"code":"var _jsxFileName = \"E:\\\\Full-Stack-Project\\\\project-movie-app\\\\client\\\\src\\\\component\\\\moviesList\\\\MoviesList.tsx\";\nimport { faSearch, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Component } from \"react\";\nimport { Alert, Col, Row } from \"react-bootstrap\";\nimport { getMovies } from \"../../services/movies\";\nimport LoadingIndicator from \"../common/LoadingIndicator\";\nimport NoDataMatched from \"../global/NoDataMatched\";\nimport MovieListItem from \"./MovieListItem\";\nimport './search-bar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass MoviesList extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      status: \"LOADING\",\n      searchString: \"\",\n      isSearchBarOpen: false\n    };\n\n    this.updateValue = event => {\n      const {\n        value\n      } = event.target;\n      this.setState(() => {\n        return {\n          searchString: value\n        };\n      }, () => {\n        this.searchMovie(this.state.searchString);\n      });\n    };\n\n    this.removeMovieFromFavourite = title => {\n      var _this$state$moviesToS;\n\n      this.setState({\n        status: \"LOADING\"\n      });\n      const moviesToShow = (_this$state$moviesToS = this.state.moviesToShow) === null || _this$state$moviesToS === void 0 ? void 0 : _this$state$moviesToS.filter(movie => movie.title !== title);\n      this.setState({\n        status: \"LOADED\",\n        moviesToShow\n      });\n    };\n\n    this.toggleSearchBar = isOpen => {\n      this.setState({\n        isSearchBarOpen: isOpen\n      });\n    };\n\n    this.reloadMovieList = async () => {\n      this.setState({\n        status: \"LOADING\"\n      });\n\n      try {\n        const movies = await getMovies(this.props.match.params.moviesCategory);\n        const moviesToShow = movies;\n        this.setState({\n          status: \"LOADED\",\n          movies,\n          moviesToShow\n        });\n      } catch (error) {\n        this.setState({\n          status: \"LOADING_ERROR\",\n          error: error\n        });\n      }\n    };\n  }\n\n  searchMovie(searchString) {\n    var _this$state$movies;\n\n    this.setState({\n      status: \"LOADING\"\n    });\n    const moviesToShow = (_this$state$movies = this.state.movies) === null || _this$state$movies === void 0 ? void 0 : _this$state$movies.filter(x => {\n      return x.title.toLowerCase().includes(searchString.toLowerCase());\n    });\n    this.setState({\n      status: \"LOADED\",\n      moviesToShow\n    });\n  }\n\n  render() {\n    var _error$message;\n\n    const {\n      status,\n      moviesToShow,\n      error,\n      searchString\n    } = this.state;\n    let el;\n\n    switch (status) {\n      case \"LOADING\":\n        el = /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n          size: \"large\",\n          message: \"We are Fetching the List of Movies. Please wait....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this);\n        break;\n\n      case \"LOADING_ERROR\":\n        let msg = (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : \"\";\n\n        if ((msg === null || msg === void 0 ? void 0 : msg.indexOf(\"404\")) > -1) {\n          el = /*#__PURE__*/_jsxDEV(NoDataMatched, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 16\n          }, this);\n        } else {\n          el = /*#__PURE__*/_jsxDEV(Alert, {\n            variant: \"danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 16\n          }, this);\n        }\n\n        break;\n\n      case \"LOADED\":\n        el = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `search ${isSearchBarOpen ? \"active\" : \"\"}`,\n              children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faSearch,\n                className: \"search-icon\",\n                onClick: () => this.toggleSearchBar(true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"search\",\n                placeholder: \"Search movie...\",\n                value: searchString,\n                onChange: this.updateValue,\n                className: `search-input ${isSearchBarOpen ? \"active\" : \"\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this), isSearchBarOpen && /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faTimes,\n                className: \"close-icon\",\n                onClick: () => this.toggleSearchBar(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            xs: 2,\n            md: 3,\n            lg: 5,\n            children: moviesToShow === null || moviesToShow === void 0 ? void 0 : moviesToShow.map((movies, idx) => /*#__PURE__*/_jsxDEV(Col, {\n              className: \"d-flex align-items-stretch my-3\",\n              children: /*#__PURE__*/_jsxDEV(MovieListItem, {\n                movies: movies,\n                path: this.props.match.params.moviesCategory,\n                onRemove: this.removeMovieFromFavourite\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 21\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true);\n        break;\n\n      default:\n        break;\n    }\n\n    return el;\n  }\n\n  async componentDidMount() {\n    await this.reloadMovieList();\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props.match.params.moviesCategory !== prevProps.match.params.moviesCategory) {\n      await this.reloadMovieList();\n    }\n  }\n\n}\n\nexport default MoviesList;","map":{"version":3,"sources":["E:/Full-Stack-Project/project-movie-app/client/src/component/moviesList/MoviesList.tsx"],"names":["faSearch","faTimes","FontAwesomeIcon","Component","Alert","Col","Row","getMovies","LoadingIndicator","NoDataMatched","MovieListItem","MoviesList","state","status","searchString","isSearchBarOpen","updateValue","event","value","target","setState","searchMovie","removeMovieFromFavourite","title","moviesToShow","filter","movie","toggleSearchBar","isOpen","reloadMovieList","movies","props","match","params","moviesCategory","error","x","toLowerCase","includes","render","el","msg","message","indexOf","map","idx","componentDidMount","componentDidUpdate","prevProps"],"mappings":"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","sourcesContent":["import { faSearch, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Component } from \"react\";\r\nimport { Alert, Col, Row } from \"react-bootstrap\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport IMovies from \"../../model/IMovies\";\r\nimport { getMovies } from \"../../services/movies\";\r\nimport { LoadingStatus } from \"../../services/types\";\r\nimport LoadingIndicator from \"../common/LoadingIndicator\";\r\nimport NoDataMatched from \"../global/NoDataMatched\";\r\nimport MovieListItem from \"./MovieListItem\";\r\nimport './search-bar.css';\r\n\r\ntype State = {\r\n  status: LoadingStatus;\r\n  movies?: IMovies[];\r\n  moviesToShow?: IMovies[];\r\n  error?: Error;\r\n  searchString: string;\r\n  isSearchBarOpen: boolean;\r\n};\r\n\r\ntype Props = {\r\n  moviesCategory: string;\r\n};\r\n\r\nclass MoviesList extends Component<RouteComponentProps<Props>, State> {\r\n  state: State = {\r\n    status: \"LOADING\",\r\n    searchString: \"\",\r\n    isSearchBarOpen: false,\r\n  };\r\n\r\n  updateValue = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { value } = event.target;\r\n\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          searchString: value,\r\n        };\r\n      },\r\n      () => {\r\n        this.searchMovie(this.state.searchString);\r\n      }\r\n    );\r\n  };\r\n\r\n  searchMovie(searchString: string) {\r\n    this.setState({\r\n      status: \"LOADING\",\r\n    });\r\n\r\n    const moviesToShow = this.state.movies?.filter((x) => {\r\n      return x.title.toLowerCase().includes(searchString.toLowerCase());\r\n    });\r\n    this.setState({\r\n      status: \"LOADED\",\r\n      moviesToShow,\r\n    });\r\n  }\r\n\r\n  removeMovieFromFavourite = (title: string) => {\r\n    this.setState({\r\n      status: \"LOADING\",\r\n    });\r\n\r\n    const moviesToShow = this.state.moviesToShow?.filter(\r\n      (movie) => movie.title !== title\r\n    );\r\n\r\n    this.setState({\r\n      status: \"LOADED\",\r\n      moviesToShow,\r\n    });\r\n  };\r\n\r\n  toggleSearchBar = (isOpen: boolean) => {\r\n    this.setState({\r\n      isSearchBarOpen: isOpen,\r\n    });\r\n  };\r\n  render() {\r\n    const { status, moviesToShow, error, searchString } = this.state;\r\n\r\n    let el;\r\n\r\n    switch (status) {\r\n      case \"LOADING\":\r\n        el = (\r\n          <LoadingIndicator\r\n            size=\"large\"\r\n            message=\"We are Fetching the List of Movies. Please wait....\"\r\n          />\r\n        );\r\n        break;\r\n      case \"LOADING_ERROR\":\r\n        let msg = error?.message ?? \"\";\r\n\r\n        if (msg?.indexOf(\"404\") > -1) {\r\n          el = <NoDataMatched />;\r\n        } else {\r\n          el = <Alert variant=\"danger\">{error?.message}</Alert>;\r\n        }\r\n        break;\r\n        case \"LOADED\":\r\n          el = (\r\n            <>\r\n              <div className=\"container\">\r\n                <div className={`search ${isSearchBarOpen ? \"active\" : \"\"}`}>\r\n                  <FontAwesomeIcon\r\n                    icon={faSearch}\r\n                    className=\"search-icon\"\r\n                    onClick={() => this.toggleSearchBar(true)}\r\n                  />\r\n                  <input\r\n                    type=\"search\"\r\n                    placeholder=\"Search movie...\"\r\n                    value={searchString}\r\n                    onChange={this.updateValue}\r\n                    className={`search-input ${isSearchBarOpen ? \"active\" : \"\"}`}\r\n                  />\r\n                  {isSearchBarOpen && (\r\n                    <FontAwesomeIcon\r\n                      icon={faTimes}\r\n                      className=\"close-icon\"\r\n                      onClick={() => this.toggleSearchBar(false)}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <Row xs={2} md={3} lg={5}>\r\n                {moviesToShow?.map((movies, idx) => (\r\n                  <Col key={idx} className=\"d-flex align-items-stretch my-3\">\r\n                    <MovieListItem\r\n                      movies={movies}\r\n                      path={this.props.match.params.moviesCategory}\r\n                      onRemove={this.removeMovieFromFavourite}\r\n                    />\r\n                  </Col>\r\n                ))}\r\n              </Row>\r\n            </>\r\n          );\r\n    \r\n          break;\r\n    \r\n      default:\r\n        break;\r\n    }\r\n\r\n    return el;\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.reloadMovieList();\r\n  }\r\n\r\n  async componentDidUpdate(prevProps: RouteComponentProps<Props>) {\r\n    if (\r\n      this.props.match.params.moviesCategory !==\r\n      prevProps.match.params.moviesCategory\r\n    ) {\r\n      await this.reloadMovieList();\r\n    }\r\n  }\r\n\r\n  reloadMovieList = async () => {\r\n    this.setState({\r\n      status: \"LOADING\",\r\n    });\r\n\r\n    try {\r\n      const movies = await getMovies(this.props.match.params.moviesCategory);\r\n      const moviesToShow = movies;\r\n      this.setState({\r\n        status: \"LOADED\",\r\n        movies,\r\n        moviesToShow,\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        status: \"LOADING_ERROR\",\r\n        error: error as Error,\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport default MoviesList;\r\n"]},"metadata":{},"sourceType":"module"}