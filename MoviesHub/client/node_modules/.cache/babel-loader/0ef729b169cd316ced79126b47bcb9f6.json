{"ast":null,"code":"var _jsxFileName = \"E:\\\\Full-Stack-Project\\\\project-movie-app\\\\client\\\\src\\\\component\\\\moviesList\\\\MoviesList.tsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Alert } from \"react-bootstrap\";\nimport { getMovies } from \"../../services/movies\";\nimport LoadingIndicator from \"../common/LoadingIndicator\";\nimport NoDataMatched from \"../global/NoDataMatched\";\nimport MovieListItem from \"./MovieListItem\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass MoviesList extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      status: \"LOADING\",\n      searchString: \"\",\n      currentPage: 1,\n      // Current page number\n      moviesPerPage: 20 // Number of movies per page\n\n    };\n\n    this.updateValue = event => {\n      const {\n        value\n      } = event.target;\n      this.setState(() => {\n        return {\n          searchString: value,\n          currentPage: 1 // Reset to the first page when searching\n\n        };\n      }, () => {\n        this.searchMovie(this.state.searchString);\n      });\n    };\n\n    this.removeMovieFromFavourite = title => {\n      var _this$state$moviesToS;\n\n      this.setState({\n        status: \"LOADING\"\n      });\n      const moviesToShow = (_this$state$moviesToS = this.state.moviesToShow) === null || _this$state$moviesToS === void 0 ? void 0 : _this$state$moviesToS.filter(movie => movie.title !== title);\n      this.setState({\n        status: \"LOADED\",\n        moviesToShow\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n  }\n\n  searchMovie(searchString) {\n    var _this$state$movies;\n\n    this.setState({\n      status: \"LOADING\"\n    });\n    const moviesToShow = (_this$state$movies = this.state.movies) === null || _this$state$movies === void 0 ? void 0 : _this$state$movies.filter(x => {\n      return x.title.toLowerCase().includes(searchString.toLowerCase());\n    });\n    this.setState({\n      status: \"LOADED\",\n      moviesToShow\n    });\n  } // Function to remove a movie from favorites\n\n\n  async componentDidMount() {\n    await this.reloadMovieList();\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props.moviesCategory !== prevProps.moviesCategory) {\n      await this.reloadMovieList();\n    }\n  }\n\n  async reloadMovieList() {\n    this.setState({\n      status: \"LOADING\"\n    });\n\n    try {\n      const movies = await getMovies(this.props.moviesCategory);\n      const moviesToShow = movies;\n      this.setState({\n        status: \"LOADED\",\n        movies,\n        moviesToShow\n      });\n    } catch (error) {\n      this.setState({\n        status: \"LOADING_ERROR\",\n        error: error\n      });\n    }\n  }\n\n  render() {\n    var _error$message;\n\n    const {\n      status,\n      moviesToShow,\n      error,\n      searchString,\n      currentPage,\n      moviesPerPage\n    } = this.state; // Calculate the indexes for movies to display on the current page\n\n    const indexOfLastMovie = currentPage * moviesPerPage;\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage;\n    const currentMovies = moviesToShow === null || moviesToShow === void 0 ? void 0 : moviesToShow.slice(indexOfFirstMovie, indexOfLastMovie);\n    let el;\n\n    switch (status) {\n      case \"LOADING\":\n        el = /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n          size: \"large\",\n          message: \"We are Fetching the List of Movies. Please wait....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this);\n        break;\n\n      case \"LOADING_ERROR\":\n        let msg = (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : \"\";\n\n        if ((msg === null || msg === void 0 ? void 0 : msg.indexOf(\"404\")) > -1) {\n          el = /*#__PURE__*/_jsxDEV(NoDataMatched, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 16\n          }, this);\n        } else {\n          el = /*#__PURE__*/_jsxDEV(Alert, {\n            variant: \"danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 16\n          }, this);\n        }\n\n        break;\n\n      case \"LOADED\":\n        el = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \" me-3 my-3  \",\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faSearch,\n              className: \"ms-4 me-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: \"Type to Search here...\",\n              className: \"ms-2\",\n              value: searchString,\n              onChange: this.updateValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            xs: 2,\n            md: 3,\n            lg: 5,\n            children: currentMovies === null || currentMovies === void 0 ? void 0 : currentMovies.map((movie, idx) => /*#__PURE__*/_jsxDEV(Col, {\n              className: \"d-flex align-items-stretch my-3\",\n              children: /*#__PURE__*/_jsxDEV(MovieListItem, {\n                movie: movie,\n                path: this.props.moviesCategory,\n                onRemove: this.removeMovieFromFavourite\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 19\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pagination\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.handlePageChange(currentPage - 1),\n              disabled: currentPage === 1,\n              children: \"Previous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.handlePageChange(currentPage + 1),\n              disabled: currentMovies && currentMovies.length < moviesPerPage,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n        break;\n\n      default:\n        break;\n    }\n\n    return el;\n  }\n\n}\n\nexport default MoviesList;","map":{"version":3,"sources":["E:/Full-Stack-Project/project-movie-app/client/src/component/moviesList/MoviesList.tsx"],"names":["React","Component","Row","Col","Alert","getMovies","LoadingIndicator","NoDataMatched","MovieListItem","FontAwesomeIcon","faSearch","MoviesList","state","status","searchString","currentPage","moviesPerPage","updateValue","event","value","target","setState","searchMovie","removeMovieFromFavourite","title","moviesToShow","filter","movie","handlePageChange","page","movies","x","toLowerCase","includes","componentDidMount","reloadMovieList","componentDidUpdate","prevProps","props","moviesCategory","error","render","indexOfLastMovie","indexOfFirstMovie","currentMovies","slice","el","msg","message","indexOf","map","idx","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Alert } from \"react-bootstrap\";\r\nimport IMovies from \"../../model/IMovies\";\r\nimport { getMovies } from \"../../services/movies\";\r\nimport { LoadingStatus } from \"../../services/types\";\r\nimport LoadingIndicator from \"../common/LoadingIndicator\";\r\nimport NoDataMatched from \"../global/NoDataMatched\";\r\nimport MovieListItem from \"./MovieListItem\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ntype State = {\r\n  status: LoadingStatus;\r\n  movies?: IMovies[];\r\n  moviesToShow?: IMovies[];\r\n  error?: Error;\r\n  searchString: string;\r\n  currentPage: number;\r\n  moviesPerPage: number;\r\n};\r\n\r\ntype Props = {\r\n    movie: IMovies;\r\n    path: string;\r\n    onRemove: (title: string) => void;\r\n  };\r\n  \r\n\r\nclass MoviesList extends Component<Props, State> {\r\n  state: State = {\r\n    status: \"LOADING\",\r\n    searchString: \"\",\r\n    currentPage: 1, // Current page number\r\n    moviesPerPage: 20, // Number of movies per page\r\n  };\r\n\r\n  updateValue = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { value } = event.target;\r\n\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          searchString: value,\r\n          currentPage: 1, // Reset to the first page when searching\r\n        };\r\n      },\r\n      () => {\r\n        this.searchMovie(this.state.searchString);\r\n      }\r\n    );\r\n  };\r\n\r\n  searchMovie(searchString: string) {\r\n    this.setState({\r\n      status: \"LOADING\",\r\n    });\r\n\r\n    const moviesToShow = this.state.movies?.filter((x) => {\r\n      return x.title.toLowerCase().includes(searchString.toLowerCase());\r\n    });\r\n    this.setState({\r\n      status: \"LOADED\",\r\n      moviesToShow,\r\n    });\r\n  }\r\n\r\n  // Function to remove a movie from favorites\r\n  removeMovieFromFavourite = (title: string) => {\r\n    this.setState({\r\n      status: \"LOADING\",\r\n    });\r\n\r\n    const moviesToShow = this.state.moviesToShow?.filter(\r\n      (movie) => movie.title !== title\r\n    );\r\n\r\n    this.setState({\r\n      status: \"LOADED\",\r\n      moviesToShow,\r\n    });\r\n  };\r\n\r\n  // Function to change the current page\r\n  handlePageChange = (page: number) => {\r\n    this.setState({ currentPage: page });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.reloadMovieList();\r\n  }\r\n\r\n  async componentDidUpdate(prevProps: Props) {\r\n    if (this.props.moviesCategory !== prevProps.moviesCategory) {\r\n      await this.reloadMovieList();\r\n    }\r\n  }\r\n\r\n  async reloadMovieList() {\r\n    this.setState({\r\n      status: \"LOADING\",\r\n    });\r\n\r\n    try {\r\n      const movies = await getMovies(this.props.moviesCategory);\r\n      const moviesToShow = movies;\r\n      this.setState({\r\n        status: \"LOADED\",\r\n        movies,\r\n        moviesToShow,\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        status: \"LOADING_ERROR\",\r\n        error: error as Error,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      status,\r\n      moviesToShow,\r\n      error,\r\n      searchString,\r\n      currentPage,\r\n      moviesPerPage,\r\n    } = this.state;\r\n\r\n    // Calculate the indexes for movies to display on the current page\r\n    const indexOfLastMovie = currentPage * moviesPerPage;\r\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage;\r\n    const currentMovies = moviesToShow?.slice(\r\n      indexOfFirstMovie,\r\n      indexOfLastMovie\r\n    );\r\n\r\n    let el;\r\n\r\n    switch (status) {\r\n      case \"LOADING\":\r\n        el = (\r\n          <LoadingIndicator\r\n            size=\"large\"\r\n            message=\"We are Fetching the List of Movies. Please wait....\"\r\n          />\r\n        );\r\n        break;\r\n      case \"LOADING_ERROR\":\r\n        let msg = error?.message ?? \"\";\r\n\r\n        if (msg?.indexOf(\"404\") > -1) {\r\n          el = <NoDataMatched />;\r\n        } else {\r\n          el = <Alert variant=\"danger\">{error?.message}</Alert>;\r\n        }\r\n        break;\r\n      case \"LOADED\":\r\n        el = (\r\n          <>\r\n            <div className=\" me-3 my-3  \">\r\n              <FontAwesomeIcon icon={faSearch} className=\"ms-4 me-1\" />\r\n              <input\r\n                placeholder=\"Type to Search here...\"\r\n                className=\"ms-2\"\r\n                value={searchString}\r\n                onChange={this.updateValue}\r\n              />\r\n            </div>\r\n            <Row xs={2} md={3} lg={5}>\r\n              {currentMovies?.map((movie, idx) => (\r\n                <Col key={idx} className=\"d-flex align-items-stretch my-3\">\r\n                  <MovieListItem\r\n                    movie={movie}\r\n                    path={this.props.moviesCategory}\r\n                    onRemove={this.removeMovieFromFavourite}\r\n                  />\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n            {/* Pagination buttons */}\r\n            <div className=\"pagination\">\r\n              <button\r\n                onClick={() => this.handlePageChange(currentPage - 1)}\r\n                disabled={currentPage === 1}\r\n              >\r\n                Previous\r\n              </button>\r\n              <button\r\n                onClick={() => this.handlePageChange(currentPage + 1)}\r\n                disabled={currentMovies && currentMovies.length < moviesPerPage}\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n          </>\r\n        );\r\n\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return el;\r\n  }\r\n}\r\n\r\nexport default MoviesList;\r\n"]},"metadata":{},"sourceType":"module"}